# -*- coding: utf-8 -*-
"""ITM618_Group_Project_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RADdrg09eksCSA59BNyJAG8foE4r3K9m
"""

import pandas as pd
import numpy as np
allData = pd.read_csv('trainset.csv')
allData

#To check what type of puthon type each columm type is
allData.dtypes

#To find number of elements
allData.size

#To find the a tuple which represents the dimensionality
allData.shape

#To find the values that represent the data etc. arrays
allData.values

#To find the number of dimensions in the data
allData.ndim

allData.describe()

allData.mean()

allData.std()

#To get info on our Targe Attribute
allData['Subscribed']

import matplotlib.pyplot as plt
import pandas as pd
df=pd.read_csv("trainset.csv")

fig=plt.figure()
ax = fig.add_subplot(1,1,1)
ax.hist(df['duration'],bins = 20)
plt.xlim(0,2100)
plt.title('Customers Subscribed')
plt.xlabel('Duration in Seconds')
plt.ylabel('#Customers')
plt.show()

fig=plt.figure()
ax = fig.add_subplot(1,1,1)
ax.scatter(df['campaign'], df['duration'])
plt.title('The Duration of Completed Contracts')
plt.xlabel('campaign')
plt.ylabel('duration in seconds')
plt.show()

import pandas as pd
df = pd.read_csv('trainset.csv')
df.tail()

df.shape
#Sum of x, y

df.isnull().tail()

df.notnull().tail()

df.dropna(how='any', inplace=True) 
#removes any rows w errors and replace w no value

df.isnull().sum()
#checks if any errors are in the row

pd.Series([True, False, True])

df.dropna(subset=['job', 'marital', 'education', 'housing', 'loan'], how='any').shape
#drop any rows w errors in 'job', 'marital', 'education', 'housing', 'loan'

df['job'].value_counts(dropna=False)
#job amounts

import pandas as pd

allData = pd.read_csv("testset.csv")
allData
#import testset and create df 'allData'

allData.dtypes
#check data type

df.dropna(subset=['job', 'marital', 'education', 'housing', 'loan'], how='any').shape
#drop any rows w errors

allData['Subscribed_val'] = allData['Subscribed']
allData['Subscribed_val'] = allData['Subscribed_val'].map({'yes': 1, 'no': 0})
allData
#reorg data

print('unique values of attribute job:', allData.job.unique())
allData = pd.get_dummies(allData, columns=['job'])
allData

print('unique values of attribute marital:', allData.marital.unique())
allData = pd.get_dummies(allData, columns=['marital'])
allData

print('unique values of attribute education:', allData.education.unique())
allData = pd.get_dummies(allData, columns=['education'])
allData

print('unique values of attribute housing:', allData.housing.unique())
allData = pd.get_dummies(allData, columns=['housing'])
allData

print('unique values of attribute loan:', allData.loan.unique())
allData = pd.get_dummies(allData, columns=['loan'])
allData

allData.columns

print('unique values of attribute contact:', allData.contact.unique())
allData = pd.get_dummies(allData, columns=['contact'])
allData

print('unique values of attribute month:', allData.month.unique())
allData['month_val'] = allData['month']
allData['month_val'] = allData['month_val'].map({'jan': 0, 'feb': 1, 'mar': 2, 'apr': 3, 'may': 4, 'jun': 5, 'jul': 6, 'aug': 7, 'sep': 8, 'oct': 9, 'nov': 10, 'dec': 11})

print('unique values of attribute day_of_week:', allData.day_of_week.unique())
allData['day_of_week_val'] = allData['day_of_week']
allData['day_of_week_val'] = allData['day_of_week_val'].map({'mon': 0, 'tue': 1, 'wed': 2, 'thu': 3, 'fri': 4, 'sat': 5, 'sun': 6})

print('unique values of attribute poutcome:', allData.poutcome.unique())
allData['poutcome_val'] = allData['poutcome']
allData['poutcome_val'] = allData['poutcome_val'].map({'failure': 0, 'nonexistent': 1, 'success': 2})

from sklearn.model_selection import train_test_split
all_y = allData['Subscribed_val']

all_X = allData[['month_val', 'day_of_week_val', 'poutcome_val', 'nr.employed', 'campaign', 'duration', 'pdays', 'age', 'job_admin.',
       'job_blue-collar', 'job_entrepreneur', 'job_housemaid',
       'job_management', 'job_retired', 'job_self-employed', 'job_services',
       'job_student', 'job_technician', 'job_unemployed', 'job_unknown',
       'marital_divorced', 'marital_married', 'marital_single',
       'marital_unknown', 'education_basic.4y', 'education_basic.6y',
       'education_basic.9y', 'education_high.school', 'education_illiterate',
       'education_professional.course', 'education_university.degree',
       'education_unknown', 'housing_no', 'housing_unknown', 'housing_yes',
       'loan_no', 'loan_unknown', 'loan_yes', 'contact_cellular',
       'contact_telephone']]


train_X, test_X, train_y, test_y = train_test_split(all_X, all_y, test_size=0.3, random_state=42)

print('length of train:', len(train_X))
print('length of test:', len(test_X))

train_y

from sklearn import tree
tree1 = tree.DecisionTreeClassifier()
tree1.fit(train_X, train_y)

predictions = tree1.predict(test_X)

from sklearn.metrics import accuracy_score
print(accuracy_score(test_y, predictions))

tree.plot_tree(tree1)

from sklearn.metrics import confusion_matrix

confusion_matrix(test_y, predictions, labels=[1,0])

TP, FP, FN, TN = confusion_matrix(test_y,predictions, labels=[1,0]).ravel()
(TP, FP, FN, TN)

trainData = pd.read_csv('trainset.csv')
testData = pd.read_csv('testset.csv')

trainData
trainData['Subscribed_val'] = trainData['Subscribed']
trainData['Subscribed_val'] = trainData['Subscribed_val'].map({'yes': 1, 'no': 0})

trainData = pd.get_dummies(trainData, columns=['job'])
trainData = pd.get_dummies(trainData, columns=['marital'])
trainData = pd.get_dummies(trainData, columns=['education'])
trainData = pd.get_dummies(trainData, columns=['housing'])
trainData = pd.get_dummies(trainData, columns=['loan'])
trainData = pd.get_dummies(trainData, columns=['contact'])
trainData['month_val'] = trainData['month']
trainData['month_val'] = trainData['month_val'].map({'jan': 0, 'feb': 1, 'mar': 2, 'apr': 3, 'may': 4, 'jun': 5, 'jul': 6, 'aug': 7, 'sep': 8, 'oct': 9, 'nov': 10, 'dec': 11})
trainData['day_of_week_val'] = trainData['day_of_week']
trainData['day_of_week_val'] = trainData['day_of_week_val'].map({'mon': 0, 'tue': 1, 'wed': 2, 'thu': 3, 'fri': 4, 'sat': 5, 'sun': 6})
trainData['poutcome_val'] = trainData['poutcome']
trainData['poutcome_val'] = trainData['poutcome_val'].map({'failure': 0, 'nonexistent': 1, 'success': 2})

all_y2 = trainData['Subscribed_val']

all_X2 = trainData[['month_val', 'day_of_week_val', 'poutcome_val', 'nr.employed', 'campaign', 'duration', 'pdays', 'age', 'job_admin.',
       'job_blue-collar', 'job_entrepreneur', 'job_housemaid',
       'job_management', 'job_retired', 'job_self-employed', 'job_services',
       'job_student', 'job_technician', 'job_unemployed', 'job_unknown',
       'marital_divorced', 'marital_married', 'marital_single',
       'marital_unknown', 'education_basic.4y', 'education_basic.6y',
       'education_basic.9y', 'education_high.school', 'education_illiterate',
       'education_professional.course', 'education_university.degree',
       'education_unknown', 'housing_no', 'housing_unknown', 'housing_yes',
       'loan_no', 'loan_unknown', 'loan_yes', 'contact_cellular',
       'contact_telephone']]

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=5)

train_y = all_y2 
train_X = all_X2 
test_y =  all_y 
test_X = all_X


knn.fit(train_X, train_y)

y_predicted = knn.predict(test_X)

y_predicted

y_real = testData['Subscribed'].values
y_real

accuracy = sum(y_real == y_predicted) / len(y_real)
print("the accuracy of this model is:", accuracy)